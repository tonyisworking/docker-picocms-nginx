# run nginx in foreground
daemon off;

# Run nginx with the user created just for this container
user ${WEB_USER} ${WEB_GROUP} ;

error_log /var/log/nginx/error.log warn;

pid /var/run/nginx.pid;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at which you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;
}

http {
  # Hide nginx version information.
  server_tokens off;

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 65)
  keepalive_timeout 20;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;

  # Gzip all the assets
  include gzip.conf;

  include    /etc/nginx/mime.types;
  include    /etc/nginx/fastcgi.conf;
  default_type application/octet-stream;
  client_body_temp_path /tmp/nginx/body 1 2;
  fastcgi_temp_path /tmp/nginx/fastcgi_temp 1 2;

  # A new log format for detecting bad bots.
  log_format blocked '[$time_local] Blocked request from $http_x_real_ip $request';

  # This log format makes it so we can see real requester's IP address \
  # not just the reverse proxy server's IP address. Also note, that \
  # "specialLog" can be replaced with any name you would like to \
  # give to this log format.
  log_format specialLog '[$time_local] $http_x_real_ip '
                        '"$request" $status $body_bytes_sent $request_time '
                        '"$http_referer" "$http_user_agent"';

  # Allow bigger default file uploads
  client_max_body_size ${NGINX_MAX_BODY_SIZE};

  # Include custom nginx http additions from project
  #include ${NGINX_INCLUDE_DIR}/http/*.conf;

  # load upstreams from one file which can be overwritten depending on situation
  include upstreams.conf;

  # Add few headers which make XSS harder
  include security_headers.conf;

  # If ${PORT} != 80 means that we are behind reverse proxy as well
  # This directive helps that we don't redirect clients into mysite.com:8080/resource type urls
  port_in_redirect off;

  server {
        listen ${PORT};

        root ${WEB_ROOT};
        index  index.php index.html index.htm;
        access_log /var/log/nginx/access.log specialLog;
        error_log stderr;

        # Blocked log file
        set $blocked_log /var/log/nginx/blocked.log;

        disable_symlinks off;

        # Include custom nginx server additions from project
      #  include ${NGINX_INCLUDE_DIR}/server/*.conf;     

      location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
      }

      location = /favicon.ico {
          allow all;
          log_not_found off;
          access_log off;
      }
      
        # deny all dot-files including git
        location ~ /\. {
            deny all;
            log_not_found off;
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.php$is_args$args;
        }

        # Static Normal files - try direct access first and then inside /wp/ folder
        location ~* \.(css|js|jpe?g|gif|ico|png|otf|ttf|eot|woff|svg|webp)$ {
            include static_files.conf;
        }
       
        location ~ [^/]\.php(/|$) {
        
            include fastcgi_settings.conf;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_read_timeout ${NGINX_FASTCGI_TIMEOUT};
            fastcgi_pass php-fpm;

        }

        # Block some vulnerabilities always
        include security.conf;
    }

}
